{"version":3,"sources":["white.png","red.png","yellow.png","index.js"],"names":["Square","props","img","White","value","Red","Yellow","className","onClick","src","height","width","alt","Board","state","squares","Array","fill","map","row","p1IsNext","board","r","c","checkVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","checkDraw","this","slice","checkAll","setState","push","renderSquare","handleClick","status","winner","renderRow","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c002855.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/white.d11b746f.png\";","export default __webpack_public_path__ + \"static/media/red.ebe6ebce.png\";","export default __webpack_public_path__ + \"static/media/yellow.7c12b92f.png\";","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport White from \"./white.png\";\r\nimport Red from \"./red.png\";\r\nimport Yellow from \"./yellow.png\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  //creating a function component\r\n  let img = White; //initial board layout\r\n  if (props.value === \"Player 1\") {\r\n    //if player 1 entered, red circle\r\n    img = Red;\r\n  }\r\n  if (props.value === \"Player 2\") {\r\n    //if player 2 entered, yellow circle\r\n    img = Yellow;\r\n  }\r\n  return (\r\n    //return function that holds image\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      <img src={img} height=\"33\" width=\"33\" alt={props.value} />\r\n    </button>\r\n  );\r\n}\r\n\r\n//Board class component\r\nclass Board extends React.Component {\r\n  //constructor intializes values and creates intial 2-D array\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(6)\r\n        .fill(null)\r\n        .map((row) => Array(7).fill(null)),\r\n      p1IsNext: true, //value used to check next person's turn\r\n    };\r\n  }\r\n\r\n  //function used to check who won the game.\r\n  checkAll(board) {\r\n    return (\r\n      checkVertical(board) ||\r\n      checkDiagonalRight(board) ||\r\n      checkDiagonalLeft(board) ||\r\n      checkHorizontal(board) ||\r\n      checkDraw(board)\r\n    );\r\n  }\r\n\r\n  //function to handle clicks based on column clicked in\r\n  handleClick(c) {\r\n    //create temp double array to modify\r\n    const squares = this.state.squares.slice();\r\n\r\n    //check for win conditions\r\n    if (this.checkAll(squares)) {\r\n      return;\r\n    }\r\n\r\n    //loop the column to check if a value already exists in the spot, place in the next highest spot\r\n    for (let r = 5; r >= 0; r--) {\r\n      if (squares[r][c] == null) {\r\n        squares[r][c] = this.state.p1IsNext ? \"Player 1\" : \"Player 2\";\r\n        this.setState({\r\n          squares: squares,\r\n          p1IsNext: !this.state.p1IsNext, //flips to next player\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  //render rows\r\n  renderRow(r) {\r\n    let row = []; //empty array of rows\r\n    for (let c = 0; c < 7; c++) {\r\n      //loop based on each column in that row\r\n      row.push(this.renderSquare(r, c)); //create square\r\n    }\r\n    return row;\r\n  }\r\n\r\n  renderSquare(r, c) {\r\n    //renders square\r\n    return (\r\n      <Square\r\n        value={this.state.squares[r][c]} //establishes connection between model and DOM for value of square\r\n        onClick={() => this.handleClick(c)} //establishes connection between Square and it's onclick function\r\n      />\r\n    );\r\n  }\r\n\r\n  //render board\r\n  render() {\r\n    const winner = this.checkAll(this.state.squares); //check win condition\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner; //display winner or if draw\r\n    } else {\r\n      status =\r\n        \"Next player: \" + (this.state.p1IsNext ? \"Player 1\" : \"Player 2\"); //display whose turn is next\r\n    }\r\n\r\n    //render all the rows\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"board-row\">{this.renderRow(0)}</div>\r\n        <div className=\"board-row\">{this.renderRow(1)}</div>\r\n        <div className=\"board-row\">{this.renderRow(2)}</div>\r\n        <div className=\"board-row\">{this.renderRow(3)}</div>\r\n        <div className=\"board-row\">{this.renderRow(4)}</div>\r\n        <div className=\"board-row\">{this.renderRow(5)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//for future modifications, also class component\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      //render Board\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\")); //render to DOM\r\n\r\n//check vertical win\r\nfunction checkVertical(board) {\r\n  // Check only if row is 3 or greater\r\n  for (let r = 3; r < 6; r++) {\r\n    for (let c = 0; c < 7; c++) {\r\n      if (board[r][c]) {\r\n        if (\r\n          board[r][c] === board[r - 1][c] &&\r\n          board[r][c] === board[r - 2][c] &&\r\n          board[r][c] === board[r - 3][c]\r\n        ) {\r\n          return board[r][c]; //return the name of player who won\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//check horizontal win\r\nfunction checkHorizontal(board) {\r\n  // Check only if column is 3 or less\r\n  for (let r = 0; r < 6; r++) {\r\n    for (let c = 0; c < 4; c++) {\r\n      if (board[r][c]) {\r\n        if (\r\n          board[r][c] === board[r][c + 1] &&\r\n          board[r][c] === board[r][c + 2] &&\r\n          board[r][c] === board[r][c + 3]\r\n        ) {\r\n          return board[r][c]; //return the name of player who won\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//check wins diagonally to the right\r\nfunction checkDiagonalRight(board) {\r\n  // Check only if row is 3 or greater AND column is 3 or less\r\n  for (let r = 3; r < 6; r++) {\r\n    for (let c = 0; c < 4; c++) {\r\n      if (board[r][c]) {\r\n        if (\r\n          board[r][c] === board[r - 1][c + 1] &&\r\n          board[r][c] === board[r - 2][c + 2] &&\r\n          board[r][c] === board[r - 3][c + 3]\r\n        ) {\r\n          return board[r][c]; //return the name of player who won\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//check wins diagonally to the left\r\nfunction checkDiagonalLeft(board) {\r\n  // Check only if row is 3 or greater AND column is 3 or greater\r\n  for (let r = 3; r < 6; r++) {\r\n    for (let c = 3; c < 7; c++) {\r\n      if (board[r][c]) {\r\n        if (\r\n          board[r][c] === board[r - 1][c - 1] &&\r\n          board[r][c] === board[r - 2][c - 2] &&\r\n          board[r][c] === board[r - 3][c - 3]\r\n        ) {\r\n          return board[r][c]; //return the name of player who won\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkDraw(board) {\r\n  for (let r = 0; r < 6; r++) {\r\n    for (let c = 0; c < 7; c++) {\r\n      if (board[r][c] === null) {\r\n        return null; //if there is empty square no draw\r\n      }\r\n    }\r\n  }\r\n  return \"draw\"; //return if draw is found\r\n}\r\n"],"sourceRoot":""}